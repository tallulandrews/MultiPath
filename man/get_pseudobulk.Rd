% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Pseudobulks.R
\name{get_pseudobulk}
\alias{get_pseudobulk}
\title{Generate Pseudobulks}
\usage{
get_pseudobulk(
  mat,
  clusters,
  individual,
  method = c("sum", "mean"),
  trim = 10,
  refactor = TRUE
)
}
\arguments{
\item{mat}{a matrix of umi counts or normalized expression for each cell, genes=rows, cells=columns, supports sparse matrices}

\item{clusters}{a vector of cluster or cell-type labels for each cell.}

\item{individual}{a vector of patient or sample labels for each cell.}

\item{method}{whether to add up or average the expression in each cell-type x sample group of cell.}

\item{trim}{cell-type x sample groups with fewer than this many cells will not be included in the pseudobulk matrix}

\item{refactor}{whether to factor the clusters & donors vectors - recommended if trimming.}
}
\value{
A matrix of pseudobulk expression with column names in the format: [cluster]_[donor].
}
\description{
Calculates pseudobulk expression for each celltype x sample pair.
}
\details{
Calculates pseudobulk expression for performing differential expression (DE). If using a negative-binomial model based DE method such as edgeR or DESeq2 the "sum" of the raw umi counts should be used. If using a Gaussian (e.g. MAST) or non-parametric DE method then the "mean" of normalized expression should be calculated.
To avoid noise from samples where only a small number of cells of a particular cell-type are found, it automatically filters out cases where there are fewer than `trim` cells of a particular cell-type in a particular sample.
Note: to avoid issues retreiving sample & cell-type IDs from the output column names, all underscores in the original clusters and donor ids are replaced with a dash("-").
}
\examples{
  example_data <- generate_test_cellcounts()
  test1 <- get_pseudobulk(example_data$counts, clusters=example_data$celltypes, donors=example_data$donors)
  dim(test1) # should be 20 x 6
  test2 <- get_pseudobulk(example_data$counts, clusters=example_data$celltypes, donors=example_data$donors, trim=0)
  dim(test2) # should be 20 x 9
  sample <- sapply(strsplit(colnames(test2), "_"), function(x){x[[2]]})
  cell_type <- sapply(strsplit(colnames(test2), "_"), function(x){x[[1]]})
}
